@use "sass:map" as map;
@use 'sass:math' as math;
@use "../../../stylesheets/variables" as vars;
@use '../../../stylesheets/values' as vals;
@use "../../../stylesheets/functions" as func;
@use "../../../stylesheets/mixins" as mixins;
@use "../variables-DEPRECATED" as varsdep;

.form-group{
  margin-top: func.units(5); //4
  &:first-child{
    margin-top: 0;
  }
}

.form-group-radio, .form-group-checkbox {
  margin-top: map.get(vals.$spacers, 3);
  position: relative;
}

// Hint text
.form-hint {
  display: block;
  color: func.color(vars.$form-hint-text-color);
  font-size: func.font-size(vars.$form-hint-font-size);
  line-height: func.units(vars.$form-hint-line-height, 'rem');
  letter-spacing: vars.$form-hint-letter-spacing;
  font-weight: func.font-weight(vars.$form-hint-font-weight);
}
.form-label {
  display: inline-block;
  @include mixins.form-label-text();
  &.disabled {
    color: func.color(vars.$input-disabled-text-color);
    font-weight: func.font-weight('medium');
  }
}



////////////////////
//** Text input **//
////////////////////

.form-input{
  appearance: none;
  border: func.border(vars.$input-border);
  border-radius: vars.$input-border-radius;
  color: func.color(vars.$input-text-color); // standardize on firefox
  display: block;
  font-size: func.font-size(vars.$input-font-size);
  line-height: func.units(vars.$input-line-height, 'rem');
  padding: calc(8px - #{func.border-width(vars.$input-border)}) calc(16px - #{func.border-width(vars.$input-border)});
  width: 100%;
  max-width: 32rem;
  margin-top: func.units(3);
  text-align: left;
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    /* IE10+ CSS styles go here */
    height: calc(#{func.units(vars.$input-line-height, 'rem')} + (8px * 2));
  }

  &:focus, &.focus{
    @include mixins.focus();
  }

  &::placeholder {
    color: func.color(vars.$input-placeholder-color);
    font-style: italic;
    opacity: 1;
    font-weight: func.font-weight("normal");
  }
}

table {
  .form-input {
    margin-top:0;
  }
}

.form-input-wrapper{
  display:flex;
  .form-input{
    -webkit-box-flex: 0;
    -ms-flex: 0 1 auto;
    flex: 0 1 auto;
    &:focus{
      position: relative;
      z-index: 1;
    }
  }
  .form-input-prefix + .form-input, &.form-input-wrapper--prefix .form-input{
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
  &.form-input-wrapper--suffix .form-input{
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }
  .form-input-prefix, .form-input-suffix {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    font-weight: func.font-weight("normal");
    font-size: func.font-size(vars.$input-font-size);
    line-height: func.units(vars.$input-line-height, 'rem');
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    display: inline-block;
    min-width: 40px;
    padding: calc(#{func.units(3)} - #{func.border-width(vars.$input-border)}) calc(#{func.units(3)} - #{func.border-width(vars.$input-border)});
    margin-top: func.units(3);
    border: func.border(vars.$input-border);
    background-color: func.color(vars.$input-prefix-suffix-background-color);
    text-align: center;
    white-space: nowrap;
    cursor: default;
    -webkit-box-flex: 0;
    -ms-flex: 0 0 auto;
    flex: 0 0 auto;
    
  }
  .form-input-suffix {
    border-left: 0;
    border-top-right-radius: vars.$input-border-radius;
    border-bottom-right-radius: vars.$input-border-radius;
  }
  .form-input-prefix {
    border-right: 0;
    border-top-left-radius: vars.$input-border-radius;
    border-bottom-left-radius: vars.$input-border-radius;
  }
}



table {
  .form-select {
    margin-top:0;
  }
}

//////////////////////
//** Input states **//
//////////////////////


$input-top-bottom-padding-feedback: calc(8px - #{vars.$input-border-width-feedback});
$input-left-right-padding-feedback: calc(16px - #{vars.$input-border-width-feedback});

.form-group.form-error {
  border-left: vars.$form-group-error-border-width solid func.color(vars.$form-group-error-border-color);
  padding-left: calc(#{func.units(4)} - 4px);

  .form-input,
  .form-select {
    border: vars.$input-border-width-feedback solid func.color(vars.$input-border-color-feedback-error);
    padding: $input-top-bottom-padding-feedback $input-left-right-padding-feedback;
  }

}
.form-error-message {
  @include mixins.form-label-text();
  display: block;
  color: func.color('error');
  margin-top: func.units(2);
}

.form-group.form-success {
  .form-input,
  .form-select {
    border: vars.$input-border-width-feedback solid func.color(vars.$input-border-color-feedback-success);
    padding: $input-top-bottom-padding-feedback $input-left-right-padding-feedback;
  }
}

input[type=text],
input[type=email],
input[type=number],
input[type=password],
input[type=search],
input[type=tel],
input[type=url],
textarea {
  &:disabled {
    background-color: func.color(vars.$input-disabled-background-color);
    border-color: func.color(vars.$input-disabled-border-color);
    color: func.color(vars.$input-disabled-text-color);
    cursor: not-allowed;
  }
}

input[readonly][type=text], textarea[readonly]{
  background-color: func.color('gray-100');
  color: func.color(vars.$input-text-color);
  border: 1px solid func.color('gray-200');
  cursor: default;
}

/////////////////////////
//** Character limit **//
/////////////////////////

.form-limit {
  .form-limit-error {
    border: vars.$input-border-width-feedback solid func.color(vars.$input-border-color-feedback-error);
    padding: $input-top-bottom-padding-feedback $input-left-right-padding-feedback;
  }

  .character-limit {
    margin-top: func.units(2);
  
    &.limit-exceeded {
      color: func.color(vars.$input-text-character-limit-exceeded-color);
    }
  }
}


/////////////////////////////////
// Custom checkboxes & radios
/////////////////////////////////
$checkbox-size: func.units(varsdep.$input-checkbox-radio-small-size);
$radio-size: func.units(varsdep.$input-checkbox-radio-small-size);
$checkbox-size-large: func.units(varsdep.$input-checkbox-radio-large-size);
$checkbox-radio-line-height-large: 4.0rem;
$radio-size-large: func.units(varsdep.$input-checkbox-radio-large-size);


.form-checkbox{
  // The actual input element is only visible to screen readers, because
  // all visual styling is done via the label.
  @include mixins.sr-only();
}
.form-radio {
  position: absolute;
  cursor: pointer;
  z-index: 1;
  margin: 0;
  opacity: 0;
  left: 0px;
  top: 3px;
}

.form-checkbox + label,
.form-radio + label {
  cursor: pointer;
  font-weight: func.font-weight("normal");
  line-height: func.units(vars.$typography-body-text-line-height, 'rem');
  margin-bottom: 0;
  display: inline-block;
  outline: none;
  color: func.color(vars.$input-text-color);
  position: relative;
  padding-left: calc(#{$checkbox-size} + 8px);
  min-height: $checkbox-size;
}

.form-checkbox + label + .form-hint,
.form-radio + label + .form-hint{
  padding-left: calc(#{$checkbox-size} + 8px);
}

//Outline for checkbox and radio
.form-checkbox + label::before,
.form-radio + label::before {
  content: '';
  display: inline-block;
  background: func.color('white');
  border-radius: varsdep.$input-checkbox-border-radius;
  border: 2px solid func.color('black');
  height: $checkbox-size;
  line-height: func.units(vars.$typography-body-text-line-height, 'rem');
  margin-right: func.units(3);
  width: $checkbox-size;
  position: absolute;
  top: 3px;
  left: 0;
}
//outline large
.form-checkbox.checkbox-large + label {
  padding-top: 8px;
  padding-left: calc(#{$checkbox-size-large} + 8px);
  padding-bottom: 8px;
  min-height: $checkbox-size-large;

  &:before{
    height: $checkbox-size-large;
    width: $checkbox-size-large;
  }
}

.form-checkbox.checkbox-large + label + .form-hint{
  padding-left: calc(#{$checkbox-size-large} + 8px);
  margin-top: -8px;
}

//extra for radio outline
.form-radio{
  height: $radio-size;
  width: $radio-size;

  &.radio-large{
    height: $radio-size-large;
    width: $radio-size-large;
  }
}
.form-radio + label::before {
  border-radius: 100%;
  height: $radio-size;
  width: $radio-size;
}
.form-radio.radio-large + label{
  padding-top: 8px;
  padding-left: calc(#{$radio-size-large} + 8px);
  padding-bottom: 8px;

  &:before{
    height: $radio-size-large;
    width: $radio-size-large;
  }
}

.form-radio.radio-large + label + .form-hint{
  padding-left: calc(#{$radio-size-large} + 8px);
  margin-top: -8px;
}
//checked checkbox
.form-checkbox.checkbox-large{
  width: $checkbox-size;
  height: $checkbox-size;

  &.checkbox-large{
    width: $checkbox-size-large;
    height: $checkbox-size-large;
  }
}

.form-checkbox:checked + label{
  &:before{
    background-color: func.color('black');
  }
  &:after{
    content: "";
    height: 7px;
    width: 12px;
    position: absolute;
    left: 4px;
    top: 5px;
    box-shadow: -2px 2px 0 0 #fff;
    transform: rotate(-46deg);
  }
}
//checkmark large
.form-checkbox.checkbox-large{
  width: 22px;
  height: 22px;
}
.form-checkbox.checkbox-large:checked + label{
  &:after{
    height: 12px;
    width: 20px;
    left: 6px;
    top: 6px;
    box-shadow: -3px 3px 0 0 #fff;
  }
}

//checked radio
.form-radio:checked + label{
  position: relative;
  &:after{
    content: "";
    height: calc(#{$radio-size} - 10px);
    width: calc(#{$radio-size} - 10px);
    background-color: func.color('black');
    position: absolute;
    left: 5px;
    top: 8px;
    border-radius: 100%;
  }
}
//checked radio large
.form-radio.radio-large:checked + label{
  &:after{
    content: "";
    height: calc(#{$radio-size-large} - 16px);
    width: calc(#{$radio-size-large} - 16px);
    left: 8px;
    top: 11px;
  }
}

//Disable
.form-checkbox:disabled + label,
.form-radio:disabled + label {
  color: func.color(vars.$input-disabled-text-color);
  cursor: not-allowed;
  &:before{
    border-color: func.color(vars.$input-disabled-text-color);
    background-color: func.color(vars.$input-disabled-background-color);
  }
}

//Disable checked
.form-checkbox:checked[disabled] + label:before {
  background-color: func.color('black');
  border-color: func.color('black');
  opacity:0.5;
}

//Disable checked
.form-radio:checked[disabled] + label:before {
  background-color: func.color('black');
  border-color: func.color('black');
  opacity:0.5;
}


// checkbox focus
.form-checkbox:focus + label::before,
.form-checkbox.focus + label::before{
  @include mixins.focus();
}
.form-radio:focus + label::before,
.form-radio.focus + label::before {
  @include mixins.focus();
}

// checkbox mixed
.form-checkbox[aria-checked="mixed"] + label{
  &:before{
    background-color: func.color('black');
  }
  &:after{
    content: "";
    height: 2px;
    width: 8px;
    left: 8px;
    top: 10px;  
    position: absolute;
    box-shadow: -2px 2px 0 0 func.color('white');
  }
}
.form-checkbox.checkbox-large[aria-checked="mixed"] + label{
  
  &:after{
    width: 12px;
    left: 13px;
    top: 16px;
    box-shadow: -3px 3px 0 0 func.color('white');
  }
}

.checkbox-content, .radio-content{
  padding-left: calc(#{map.get(vals.$spacers, varsdep.$input-checkbox-radio-content-padding-left)} - #{map.get(vals.$spacers, varsdep.$input-checkbox-radio-content-border-width)});
  padding-top: map.get(vals.$spacers, varsdep.$input-checkbox-radio-content-padding-top);
  padding-bottom: func.units(5);
	border-left: map.get(vals.$spacers, varsdep.$input-checkbox-radio-content-border-width) solid func.color(vars.$input-checkbox-radio-content-border-color);
  margin-left: math.div((map.get(vals.$spacers, varsdep.$input-checkbox-radio-small-size) - map.get(vals.$spacers, varsdep.$input-checkbox-radio-content-border-width)), 2);
  margin-top: func.units(2);
  margin-bottom: func.units(3);
  
  &-large{
    padding-left: calc(#{map.get(vals.$spacers, varsdep.$input-checkbox-radio-content-large-padding-left)} - #{map.get(vals.$spacers, varsdep.$input-checkbox-radio-content-border-width)} - (#{map.get(vals.$spacers, varsdep.$input-checkbox-radio-content-border-width)} / 2));
    margin-left: math.div((map.get(vals.$spacers, varsdep.$input-checkbox-radio-large-size) - map.get(vals.$spacers, varsdep.$input-checkbox-radio-content-border-width)), 2);
  }
  &[aria-hidden="true"]{
    display:none;
  }
}

/////////////////////////
// Range inputs
/////////////////////////
[type=range] {
  appearance: none;
  border: none;
  padding-left: 0;
  width: 100%;
}

[type=range]::-webkit-slider-runnable-track {
  background: func.color(vars.$input-range-track-default-background-color);
  border: func.border(vars.$input-range-track-default-border);
  cursor: pointer;
  height: 1.2rem;
  width: 100%;
}

[type=range]::-moz-range-track {
  background: func.color(vars.$input-range-track-default-background-color);
  border: func.border(vars.$input-range-track-default-border);
  cursor: pointer;
  height: 1.2rem;
  width: 100%;
}

[type=range]::-webkit-slider-thumb {
  -webkit-appearance: none;
  border: func.border(vars.$input-range-thumb-default-border);
  height: 2.2rem;
  border-radius: 1.5rem;
  background: func.color(vars.$input-range-thumb-default-background-color);
  cursor: pointer;
  margin-top: -.65rem;
  width: 2.2rem;
}

[type=range]::-moz-range-thumb {
  background: func.color(vars.$input-range-thumb-default-background-color);
  border: func.border(vars.$input-range-thumb-default-border);
  border-radius: 1.5rem;
  cursor: pointer;
  height: 2.2rem;
  width: 2.2rem;
}

.form-label + input[type=file]{
  margin-top: func.units(3);
}

input[type=file]{
  display: block;
}
