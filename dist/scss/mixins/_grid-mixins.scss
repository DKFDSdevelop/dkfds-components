@use 'sass:math';
@use "../values/fds-values" as fds;
@use "../mixins/breakpoints" as breakpoints;

/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin grid-container() {
  width: 100%;
  padding-right: math.div(fds.$grid-gutter-width, 2);
  padding-left: math.div(fds.$grid-gutter-width, 2);
  margin-right: auto;
  margin-left: auto;
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin grid-container-max-widths($max-widths: fds.$container-max-widths, $breakpoints: fds.$grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include breakpoints.media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin grid-row() {
  display: flex;
  flex-wrap: wrap;
  margin-right: math.div(fds.$grid-gutter-width, -2);
  margin-left: math.div(fds.$grid-gutter-width, -2);
}

@mixin grid-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage(math.div($size, $columns));
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage(math.div($size, $columns));
}

@mixin grid-offset($size, $columns: $grid-columns) {
  $num: math.div($size, $columns);
  margin-left: if($num == 0, 0, percentage($num));
}
