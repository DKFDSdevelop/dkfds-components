@use "sass:map" as map;
@use 'sass:math';
@use "variables" as *;

$spacer: 8px !default;
$spacers: (
    0: 0,
    1: ($spacer * .25),     //2px
    2: ($spacer * .5),      //4px
    3: $spacer,             //8px
    305:($spacer * 1.5),    //12px
    4: ($spacer * 2),       //16px
    405: ($spacer * 2.5),   //20px
    5: ($spacer * 3),       //24px
    505: ($spacer * 3.5),   //28px
    6: ($spacer * 4),       //32px
    605: ($spacer * 4.5),   //36px
    7: ($spacer * 5),       //40px
    705: ($spacer * 5.5),   //44px
    8: ($spacer * 6),       //48px
    805: ($spacer * 6.5),   //52px
    9: ($spacer * 7),       //56px
    905: ($spacer * 7.5),   //60px
);

/*
----------------------------------------
divide()
----------------------------------------
Divides one number by another, to a
specified precision.
----------------------------------------
*/

@function divide($dividend, $divisor, $precision: 10, $depth: 0) {
    @if ($dividend < 0 and $divisor < 0) {
      $dividend: -1 * $dividend;
      $divisor: -1 * $divisor;
    }
  
    @if ($dividend < 0) {
      @return -1 * divide(-1 * $dividend, $divisor, $precision, $depth);
    }
  
    @if ($divisor < 0) {
      @return -1 * divide($dividend, $divisor * -1, $precision, $depth);
    }
  
    @if ($divisor == 0) {
      @error 'Illegal division by zero';
    }
  
    $result: if(unit($dividend) == unit($divisor), 0, $dividend * 0);
    @while $dividend - $divisor >= 0 {
      $result: $result + 1;
      $dividend: $dividend - $divisor;
    }
  
    @if $dividend > 0 {
      @if $depth < $precision {
        $result: $result +
          divide($dividend * 10, $divisor, $precision, $depth + 1) *
          0.1;
      } @else if $depth == $precision {
        $next-digit: divide($dividend * 10, $divisor, $precision, $depth + 1);
        @if $next-digit >= 5 {
          $result: $result + 1;
        }
      }
    }
  
    @return $result;
  }
  

/*
----------------------------------------
px-to-rem()
----------------------------------------
Converts a value in px to a value in rem
----------------------------------------
*/

@function px-to-rem($pixels) {
    
    $px-to-rem: divide($pixels, $root-font-size-equiv) * 1rem;
    $px-to-rem: divide(round($px-to-rem * 100), 100);

    @return $px-to-rem;
}


// ----------------------------------------
// Get a valid FDS unit
// ----------------------------------------

@function units($value, $unit: 'px') {

    @if map.has-key($spacers, $value) {

        $result-in-pixels: map.get($spacers, $value);

        @if $unit == 'rem' {
            @return px-to-rem($result-in-pixels);
        }

        @return $result-in-pixels;
    }

    @error '#{$value} is not a valid FDS unit token.';
    
}