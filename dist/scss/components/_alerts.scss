@use "../values/fds-values" as fds;
@use "../mixins/mixins" as mixins;

/*
----------------------------------------
Alert
----------------------------------------
*/
$custom-alerts: () !default;
$custom-alerts-bar: () !default;

$alerts: (
  success: fds.$alert-success-background-color,
  warning: fds.$alert-warning-background-color,
  error: fds.$alert-error-background-color,
  info: fds.$alert-info-background-color
);

$alerts-bar: (
  success: fds.$alert-success-border-color,
  warning: fds.$alert-warning-border-color,
  error: fds.$alert-error-border-color,
  info: fds.$alert-info-border-color
);

$alerts: map-merge($alerts, $custom-alerts);
$alerts-bar: map-merge($alerts-bar, $custom-alerts-bar);

.alert {
  background-color: fds.color(fds.$alert-background-color);
  background-position: 16px 16px;
  background-repeat: no-repeat;
  background-size: 24px;
  padding-bottom: fds.units(fds.$alert-padding);
  padding-left: fds.units(fds.$alert-padding);
  padding-right: fds.units(fds.$alert-padding);
  padding-top: fds.units(fds.$alert-padding);
  position: relative;
  margin-top: fds.units(4);
  margin-bottom: fds.units(4);

  border-left: fds.units(fds.$alert-border-size) solid fds.color(fds.$alert-border-color);

  &:first-child {
    margin-top:0;
  }

  &.alert--paragraph {
    max-width: fds.$typography-text-max-width;
  }
  .alert-close{
    @include mixins.button-unstyled();
    cursor:pointer;
    position: absolute;
    top: fds.units(4);
    right: fds.units(4);
    @include mixins.small-text;
    color: fds.color(fds.$alert-close-text-color);
    text-decoration: underline;
    .icon-svg{
      margin-right: fds.units(2);
      width: 1.6rem;
      height: 1.6rem;
      fill: currentColor;
    }
  }

  .alert-heading {
    @include mixins.responsive-style(fds.$alert-heading-fontsize, font-size);
    @include mixins.responsive-style(fds.$alert-heading-lineheight, line-height);
    margin-top: 0;
    margin-bottom: 0;
    font-weight: fds.font-weight("semibold");
    color: fds.color(fds.$alert-heading-color);
    -ms-word-wrap: break-word;
    word-wrap: break-word;
  }

  .alert-text {
    margin-bottom: 0;
    margin-top: 0;
    color: fds.color(fds.$alert-text-color);
    max-width: fds.$typography-text-max-width;
    a, a:link, a:active, a:visited, a:hover{
      color: fds.color(fds.$alert-text-color);
    }
  }
}

@each $name, $bgcolor in $alerts {
  .alert-#{$name} {
    background-color: fds.color($bgcolor);
    border-color: fds.color(map-get($alerts-bar, $name));

    &.alert--show-icon{
      $alert-icon: $name;
      @if $name == error {
        $alert-icon: 'highlight-off';
      }
      
      @if $name == success {
        $alert-icon: 'check-circle';
      }
      
      @if $name == warning {
        $alert-icon: 'report-problem';
      }
      background-image: url(fds.$icons-folder-path+'/'+$alert-icon+'.svg');
      padding-left: calc(#{fds.units(fds.$alert-padding)} + #{fds.$alert-icon-size} + 8px);
    }
  }
}

.alert + .alert{
  margin-top: fds.units(4);
}
