{"version":3,"file":"css/dkfds-custom-input.min.css","mappings":"AAIA,qBAEI,cACA,gBAMA,0FACI,aAEA,uGACI,sBACA,iBAIR,iDACI,cCqCJ,wBDtCA,iDAMQ,mBAFA,aACA,kBACA,EAGJ,yEACI,eC4BR,wBD7BI,yEAIQ,kBAIR,yFACI,eCoBR,wBDrBI,yFAIQ,kBAGJ,iHACI,eAIR,2EAEI,eADA,kBACA,CAKJ,4LEfJ,WAEA,YACA,gBAFA,UAHA,kBACA,UAKA,mBACA,SACA,YFaI,yGACI,eAEA,uIACI,WAkBZ,0GACI,gBACA,WASI,kKAHI,yBACA,UAIA,CAFJ,8JAHI,0BACA,UAIA,CAFJ,0JAHI,0BACA,UAIA,CAFJ,0JAHI,0BACA,UAIA,CAFJ,0JAHI,0BACA,UAIA,CAFJ,8JAHI,0BACA,UAIA","sources":["webpack://dkfds/./src/stylesheets/custom-elements/fds-input.scss","webpack://dkfds/./src/stylesheets/mixins/_breakpoints.scss","webpack://dkfds/./src/stylesheets/mixins/_base-mixins.scss"],"sourcesContent":["@use \"../variables\" as vars;\r\n@use \"../functions\" as func;\r\n@use \"../mixins\" as mixins;\r\n\r\nfds-input,\r\n.fds-input {\r\n    display: block;\r\n    margin-top: func.units(5);\r\n\r\n    &:first-child {\r\n        margin-top: 0;\r\n    }\r\n\r\n    .form-group{\r\n        margin-top: 0;\r\n\r\n        .form-input.form-limit-error {\r\n            border: vars.$input-border-width-feedback solid func.color(vars.$input-border-color-feedback-error);\r\n            padding: calc(8px - #{vars.$input-border-width-feedback}) calc(16px - #{vars.$input-border-width-feedback});\r\n        }\r\n    }\r\n\r\n    .edit-wrapper {\r\n        display: block;\r\n\r\n        @include mixins.media-breakpoint-up(sm) {\r\n            display: flex;\r\n            flex-direction: row;\r\n            align-items: center;\r\n        }\r\n\r\n        .form-input {\r\n            margin-right: 0;\r\n\r\n            @include mixins.media-breakpoint-up(sm) {\r\n                margin-right: func.units(3);\r\n            }\r\n        }\r\n\r\n        .form-input-wrapper {\r\n            margin-right: 0;\r\n\r\n            @include mixins.media-breakpoint-up(sm) {\r\n                margin-right: func.units(3);\r\n            }\r\n\r\n            .form-input {\r\n                margin-right: 0;\r\n            }\r\n        }\r\n\r\n        .edit-button {\r\n            white-space: nowrap;\r\n            margin-top: func.units(3);\r\n        }\r\n    }\r\n\r\n    .character-limit-wrapper {\r\n        .max-limit, .sr-message {\r\n            @include mixins.sr-only;\r\n        }\r\n\r\n        .visible-message {\r\n            margin-top: func.units(2);\r\n\r\n            &.limit-exceeded {\r\n                color: func.color(vars.$input-text-character-limit-exceeded-color);\r\n            }\r\n        }\r\n    }\r\n\r\n    $input-maxwidths: (\r\n        xxs:  8rem,\r\n        xs:  16rem,\r\n        s:   24rem,\r\n        m:   32rem,\r\n        l:   40rem,\r\n        xl:  48rem\r\n    );\r\n\r\n    .form-input {\r\n        max-width: 32rem;\r\n        width: 100%;\r\n    }\r\n    .form-input-wrapper {\r\n        max-width: 32rem;\r\n        width: 100%;\r\n    }\r\n\r\n    @each $size, $width in $input-maxwidths {\r\n        &[maxwidth='#{$size}'] {\r\n            .form-input {\r\n                max-width: $width !important;\r\n                width: 100%;\r\n            }\r\n            .form-input-wrapper {\r\n                max-width: $width !important;\r\n                width: 100%;\r\n            }\r\n        }\r\n    }\r\n}","@use 'sass:list' as list;\r\n@use \"sass:map\" as map;\r\n@use \"../variables\" as vars;\r\n\r\n// Breakpoint viewport sizes and media queries.\r\n// ------------------------------\r\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\r\n// ------------------------------\r\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\r\n// ------------------------------\r\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\r\n\r\n// Name of the next breakpoint, or null for the last breakpoint.\r\n// ------------------------------\r\n//    >> breakpoint-next(sm)\r\n//    md\r\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    md\r\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\r\n//    md\r\n@function breakpoint-next($name, $breakpoints: vars.$grid-breakpoints, $breakpoint-names: map.keys($breakpoints)) {\r\n  $n: list.index($breakpoint-names, $name);\r\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\r\n}\r\n\r\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\r\n// ------------------------------\r\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    576px\r\n@function breakpoint-min($name, $breakpoints: vars.$grid-breakpoints) {\r\n  $min: map.get($breakpoints, $name);\r\n  @return if($min != 0, $min, null);\r\n}\r\n\r\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\r\n// The maximum value is calculated as the minimum of the next one less 0.1.\r\n// ------------------------------\r\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    767px\r\n@function breakpoint-max($name, $breakpoints: vars.$grid-breakpoints) {\r\n  $next: breakpoint-next($name, $breakpoints);\r\n  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);\r\n}\r\n\r\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\r\n// Useful for making responsive utilities.\r\n// ------------------------------\r\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    \"\"  (Returns a blank string)\r\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    \"-sm\"\r\n@function breakpoint-infix($name, $breakpoints: vars.$grid-breakpoints) {\r\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\r\n}\r\n\r\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\r\n// Makes the @content apply to the given breakpoint and wider.\r\n@mixin media-breakpoint-up($name, $breakpoints: vars.$grid-breakpoints) {\r\n  $min: breakpoint-min($name, $breakpoints);\r\n  @if $min {\r\n    @media (min-width: $min) {\r\n      @content;\r\n    }\r\n  } @else {\r\n    @content;\r\n  }\r\n}\r\n\r\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\r\n// Makes the @content apply to the given breakpoint and narrower.\r\n@mixin media-breakpoint-down($name, $breakpoints: vars.$grid-breakpoints) {\r\n  $max: breakpoint-max($name, $breakpoints);\r\n  @if $max {\r\n    @media (max-width: $max) {\r\n      @content;\r\n    }\r\n  } @else {\r\n    @content;\r\n  }\r\n}\r\n\r\n// Media that spans multiple breakpoint widths.\r\n// Makes the @content apply between the min and max breakpoints\r\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: vars.$grid-breakpoints) {\r\n  $min: breakpoint-min($lower, $breakpoints);\r\n  $max: breakpoint-max($upper, $breakpoints);\r\n\r\n  @if $min != null and $max != null {\r\n    @media (min-width: $min) and (max-width: $max) {\r\n      @content;\r\n    }\r\n  } @else if $max == null {\r\n    @include media-breakpoint-up($lower) {\r\n      @content;\r\n    }\r\n  } @else if $min == null {\r\n    @include media-breakpoint-down($upper) {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n// Media between the breakpoint's minimum and maximum widths.\r\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\r\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\r\n@mixin media-breakpoint-only($name, $breakpoints: vars.$grid-breakpoints) {\r\n  $min: breakpoint-min($name, $breakpoints);\r\n  $max: breakpoint-max($name, $breakpoints);\r\n\r\n  @if $min != null and $max != null {\r\n    @media (min-width: $min) and (max-width: $max) {\r\n      @content;\r\n    }\r\n  } @else if $max == null {\r\n    @include media-breakpoint-up($name) {\r\n      @content;\r\n    }\r\n  } @else if $min == null {\r\n    @include media-breakpoint-down($name) {\r\n      @content;\r\n    }\r\n  }\r\n}","@use \"../variables\" as vars;\r\n@use \"../functions\" as func;\r\n\r\n@mixin add-background-svg($image-name) {\r\n    background-image: url(\"#{vars.$icons-folder-path}#{$image-name}.svg\");\r\n    background-repeat: no-repeat;\r\n}\r\n\r\n@mixin button-unstyled {\r\n    background-color: func.color('transparent');\r\n    border: 0;\r\n    border-radius: 0;\r\n    font-weight: func.font-weight(\"normal\");\r\n    margin: 0;\r\n    padding: 0;\r\n    text-align: left;\r\n    color: inherit;\r\n    min-height: auto;\r\n\r\n    &:hover,\r\n    &:focus {\r\n        background-color: func.color('transparent');\r\n        color: inherit;\r\n    }\r\n}\r\n\r\n@mixin focus-outline {\r\n    outline: vars.$theme-focus-width vars.$theme-focus-style func.color(\"focus\");\r\n}\r\n\r\n@mixin focus-offset {\r\n    outline-offset: vars.$theme-focus-offset;\r\n}\r\n\r\n@mixin focus {\r\n    @include focus-outline;\r\n    @include focus-offset;\r\n}\r\n\r\n// Screen reader only helper\r\n@mixin sr-only() {\r\n    position: absolute;\r\n    width: 1px;\r\n    height: 1px;\r\n    padding: 0;\r\n    margin: -1px; // stylelint-disable-line declaration-property-unit-disallowed-list\r\n    overflow: hidden;\r\n    clip: rect(0, 0, 0, 0);\r\n    border: 0;\r\n    left: -999em;\r\n}\r\n\r\n// This \"negates\" the sr-only() helper; useful if\r\n// we want the default state of something to be\r\n// for screen readers only, but we want to force\r\n// it to show for sighted users under more specific\r\n// conditions.\r\n@mixin not-sr-only() {\r\n    position: static;\r\n}\r\n\r\n// Unstyled list helper\r\n@mixin unstyled-list() {\r\n    margin: 0;\r\n    list-style-type: none;\r\n    padding-left: 0;\r\n\r\n    > li {\r\n        margin-bottom: 0;\r\n        margin-top: 0;\r\n        padding-left: 0;\r\n\r\n        &::before {\r\n            content: \"\" !important;\r\n            padding-right: 0 !important;\r\n        }\r\n    }\r\n}\r\n\r\n// nobullet list helper\r\n@mixin nobullet-list() {\r\n    list-style-type: none;\r\n    padding-left: 0;\r\n\r\n    > li {\r\n        padding-left: 0;\r\n\r\n        &::before {\r\n            content: \"\" !important;\r\n            padding-right: 0 !important;\r\n        }\r\n    }\r\n}\r\n\r\n// noindent list helper\r\n@mixin noindent-list() {\r\n    > li {\r\n        padding-left: calc(8px + 6px);\r\n\r\n        &::before {\r\n            left: 0;\r\n        }\r\n    }\r\n}\r\n\r\n// Appearance\r\n@mixin appearance-none {\r\n    appearance: none;\r\n}\r\n"],"names":[],"sourceRoot":""}