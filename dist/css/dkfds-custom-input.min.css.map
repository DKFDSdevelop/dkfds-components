{"version":3,"file":"css/dkfds-custom-input.min.css","mappings":"AAIA,qBAEI,cACA,gBAMA,0FACI,aAEA,uGACI,sBACA,iBAIR,iDACI,cCqCJ,wBDtCA,iDAMQ,mBAFA,aACA,kBACA,EAGJ,yEACI,eC4BR,wBD7BI,yEAIQ,kBAIR,yFACI,eCoBR,wBDrBI,yFAIQ,kBAGJ,iHACI,eAIR,2EAEI,eADA,kBACA,CAKJ,4LEfJ,WAEA,YACA,gBAFA,UAHA,kBACA,UAKA,mBACA,SACA,YFaI,yGACI,eAEA,uIACI,WAkBZ,0GACI,gBACA,WASI,kKAHI,yBACA,UAIA,CAFJ,8JAHI,0BACA,UAIA,CAFJ,0JAHI,0BACA,UAIA,CAFJ,0JAHI,0BACA,UAIA,CAFJ,0JAHI,0BACA,UAIA,CAFJ,8JAHI,0BACA,UAIA","sources":["../scss/custom-elements/fds-input.scss","../scss/mixins/_breakpoints.scss","../scss/mixins/_base-mixins.scss"],"sourcesContent":["@use \"../variables\" as vars;\n@use \"../functions\" as func;\n@use \"../mixins\" as mixins;\n\nfds-input,\n.fds-input {\n    display: block;\n    margin-top: func.units(5);\n\n    &:first-child {\n        margin-top: 0;\n    }\n\n    .form-group{\n        margin-top: 0;\n\n        .form-input.form-limit-error {\n            border: vars.$input-border-width-feedback solid func.color(vars.$input-border-color-feedback-error);\n            padding: calc(8px - #{vars.$input-border-width-feedback}) calc(16px - #{vars.$input-border-width-feedback});\n        }\n    }\n\n    .edit-wrapper {\n        display: block;\n\n        @include mixins.media-breakpoint-up(sm) {\n            display: flex;\n            flex-direction: row;\n            align-items: center;\n        }\n\n        .form-input {\n            margin-right: 0;\n\n            @include mixins.media-breakpoint-up(sm) {\n                margin-right: func.units(3);\n            }\n        }\n\n        .form-input-wrapper {\n            margin-right: 0;\n\n            @include mixins.media-breakpoint-up(sm) {\n                margin-right: func.units(3);\n            }\n\n            .form-input {\n                margin-right: 0;\n            }\n        }\n\n        .edit-button {\n            white-space: nowrap;\n            margin-top: func.units(3);\n        }\n    }\n\n    .character-limit-wrapper {\n        .max-limit, .sr-message {\n            @include mixins.sr-only;\n        }\n\n        .visible-message {\n            margin-top: func.units(2);\n\n            &.limit-exceeded {\n                color: func.color(vars.$input-text-character-limit-exceeded-color);\n            }\n        }\n    }\n\n    $input-maxwidths: (\n        xxs:  8rem,\n        xs:  16rem,\n        s:   24rem,\n        m:   32rem,\n        l:   40rem,\n        xl:  48rem\n    );\n\n    .form-input {\n        max-width: 32rem;\n        width: 100%;\n    }\n    .form-input-wrapper {\n        max-width: 32rem;\n        width: 100%;\n    }\n\n    @each $size, $width in $input-maxwidths {\n        &[maxwidth='#{$size}'] {\n            .form-input {\n                max-width: $width !important;\n                width: 100%;\n            }\n            .form-input-wrapper {\n                max-width: $width !important;\n                width: 100%;\n            }\n        }\n    }\n}","@use 'sass:list' as list;\n@use \"sass:map\" as map;\n@use \"../variables\" as vars;\n\n// Breakpoint viewport sizes and media queries.\n// ------------------------------\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n// ------------------------------\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n// ------------------------------\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n// ------------------------------\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: vars.$grid-breakpoints, $breakpoint-names: map.keys($breakpoints)) {\n  $n: list.index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n// ------------------------------\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: vars.$grid-breakpoints) {\n  $min: map.get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.1.\n// ------------------------------\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767px\n@function breakpoint-max($name, $breakpoints: vars.$grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n// ------------------------------\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: vars.$grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: vars.$grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: vars.$grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: vars.$grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: vars.$grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name) {\n      @content;\n    }\n  }\n}","@use \"../variables\" as vars;\n@use \"../functions\" as func;\n\n@mixin add-background-svg($image-name) {\n    background-image: url(\"#{vars.$icons-folder-path}#{$image-name}.svg\");\n    background-repeat: no-repeat;\n}\n\n@mixin button-unstyled {\n    background-color: func.color('transparent');\n    border: 0;\n    border-radius: 0;\n    font-weight: func.font-weight(\"normal\");\n    margin: 0;\n    padding: 0;\n    text-align: left;\n    color: inherit;\n    min-height: auto;\n\n    &:hover,\n    &:focus {\n        background-color: func.color('transparent');\n        color: inherit;\n    }\n}\n\n@mixin focus-outline {\n    outline: vars.$theme-focus-width vars.$theme-focus-style func.color(\"focus\");\n}\n\n@mixin focus-offset {\n    outline-offset: vars.$theme-focus-offset;\n}\n\n@mixin focus {\n    @include focus-outline;\n    @include focus-offset;\n}\n\n// Screen reader only helper\n@mixin sr-only() {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px; // stylelint-disable-line declaration-property-unit-disallowed-list\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    border: 0;\n    left: -999em;\n}\n\n// This \"negates\" the sr-only() helper; useful if\n// we want the default state of something to be\n// for screen readers only, but we want to force\n// it to show for sighted users under more specific\n// conditions.\n@mixin not-sr-only() {\n    position: static;\n}\n\n// Unstyled list helper\n@mixin unstyled-list() {\n    margin: 0;\n    list-style-type: none;\n    padding-left: 0;\n\n    > li {\n        margin-bottom: 0;\n        margin-top: 0;\n        padding-left: 0;\n\n        &::before {\n            content: \"\" !important;\n            padding-right: 0 !important;\n        }\n    }\n}\n\n// nobullet list helper\n@mixin nobullet-list() {\n    list-style-type: none;\n    padding-left: 0;\n\n    > li {\n        padding-left: 0;\n\n        &::before {\n            content: \"\" !important;\n            padding-right: 0 !important;\n        }\n    }\n}\n\n// noindent list helper\n@mixin noindent-list() {\n    > li {\n        padding-left: calc(8px + 6px);\n\n        &::before {\n            left: 0;\n        }\n    }\n}\n\n// Appearance\n@mixin appearance-none {\n    appearance: none;\n}\n"],"names":[],"sourceRoot":""}